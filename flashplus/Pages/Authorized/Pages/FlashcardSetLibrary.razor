@page "/flashcardset/library"
@layout AuthorizedLayout

@inject IFlashcardSetDataAccess FlashcardSetDataAccess
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

@code{
    string SessionID { get; set; }
    bool IsInitialized { get; set; }
    int pageNo = 1;
    int pageTotal;
    int setNo = 0;
    List<string[]> displayedSets;

    FlashcardSetModel flashcardSetModel = new FlashcardSetModel();

    protected override async Task OnInitializedAsync()
    {
        SessionID = await localStorage.GetItemAsync<string>("SessionID");
        flashcardSetModel = await FlashcardSetDataAccess.GetAllFlashcardSetsByUserAsync(SessionID);

        pageTotal = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(flashcardSetModel.FlashcardSets.Count) / 6));


        Console.WriteLine(pageTotal);
        IsInitialized = true;

        GetDisplayedSets(pageNo);

    }

    public async Task LoadFlashcardSet(int SetID)
    {
        await localStorage.SetItemAsync("SetID", SetID);
        NavigationManager.NavigateTo("/flashcardset/view");
    }

    public void GetDisplayedSets(int pageNo)
    {
        displayedSets = new List<string[]>();
        foreach(var flashcardset in flashcardSetModel.FlashcardSets.Skip(pageNo-1*6).Take(6))
        {
            displayedSets.Add(flashcardset);
        }
    }

    public void NextPage()
    {
        if (pageNo == pageTotal)
        {
            pageNo = 1;
            GetDisplayedSets(pageNo);
        }
        else
        {
            pageNo++;
            GetDisplayedSets(pageNo);
        }
    }

    public void PreviousPage()
    {
        if (pageNo == 1)
        {
            pageNo = pageTotal;
            GetDisplayedSets(pageNo);
        }
        else
        {
            pageNo--;
            GetDisplayedSets(pageNo);
        }
    }



}

@if (IsInitialized)
{
    <PageTitle>View Flashcard Set</PageTitle>

    <div class="center-horizontal">

        <div class="library-container">

            <div class="title-container">
                <h3>Flashcard Set Library</h3>
            </div>

            <div class="set-row">
                @foreach (var flashcardset in displayedSets)
                {
                    <div class="flashcardset" onclick="@(async () => await LoadFlashcardSet(Convert.ToInt32(flashcardset[2])))">
                        <h2>@flashcardset[0] |</h2>
                        <p>@flashcardset[1]</p>
                    </div>
                }
            </div>

            <div class="center-horizontal">
                <button class="nextcard-button" @onclick="@PreviousPage">&lt;</button>
                <p id="card-counter">@pageNo / @pageTotal</p>
                <button class="nextcard-button" @onclick="@NextPage">&gt;</button>
            </div>

        </div>

    </div>
}
